IEnumerable Nedir?

namespace LinqSample1
{
    class Program
    {
        static void Main(string[] args)
        {
            
            List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            /*
            var querySyntax = from obj in list
                              where obj > 2
                              select obj;
            //burada mouse'umuzu querySyntax'ın üzerinde tıklamadan tuttuğumuzda türünün "IEnumerable generic type int" olduğunu görürüz.
            */

            //ve bu şekilde yazdığımızda herhangi bir hata ile karşılamayız.
            IEnumerable<int> querySyntax = from obj in list
                                           where obj > 2
                                           select obj;

            foreach (var item in querySyntax)
            {
                Console.WriteLine(item);
            }

        }
    }
}

Tamam da nedir bu IEnumerable?

- Bir arayüzdür. (interface)
- System.Collection namespace'inde bulunur.
- C#'daki bütün koleksiyonlar tarafından implement edilir.
- Iteration Design Pattern'in bir parçasıdır. Bu sayede, bu arayüz ile koleksiyonlar üzerinde iterasyon(foreach döngüsü)
yapabilmekteyiz.
- Ayrıca IEnumerable<T> generic list olarak da kullanabiliriz.
- In Memory data objects yani bellek-içi veri nesneleri ile kullanılmalıdır.
- C#'daki her koleksiyon aslında bir IEnumerable child class'ıdır. (bkz. inheritance-kalıtım)

Dipnot: Bellek içi veritabanı (IMDB), öncelikle bilgisayar verilerini depolamak için ana belleğe bağlı olan bir veritabanı yönetim sistemidir. IMDB'ler, daha az CPU talimatı uyguladıkları ve dahili optimizasyon algoritmalarının çok daha basit olduğu için disk için optimize edilmiş veritabanlarından daha hızlıdır. (bkz.https://tr.theastrologypage.com/memory-database)

- GetEnumerator() metodu sayesinde herhangi bir türdeki koleksiyonu itere edebilmekteyiz.

Eğer ki CTRL tuşuna basılı tutup IEnumerable'a tıklarsanız;

namespace System.Collections.Generic
{
    ...
    public interface IEnumerable<out T> : IEnumerable
    {
        ...
        IEnumerator<T> GetEnumerator();
    }
}

ilgili namespace'e giderek daha detaylı bir şekilde gözlemleyebilirsiniz.

Genel bir örnek;

namespace LinqSample1
{
    class Program
    {
        static void Main(string[] args)
        {
            
            List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

            List<Employee> employees = new List<Employee>()
            {
                new Employee() { Id = 1, Name = "Ali" },
                new Employee() { Id = 2,Name = "Hakan"}
            };

            IEnumerable<Employee> query = from emp in employees
                                          where emp.Id == 1
                                          select emp;

            foreach (var item in query)
            {
                Console.WriteLine("Id : " + item.Id + "'e sahip şahsın adı: " + item.Name);
            }

        }
        class Employee
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
    }
}

Çıktı:
Id : 1'e sahip sahsın adı: Ali


------------------

IQueryable nedir?

- Bu da bir arayüzdür.
- System.Linq namespace'inde bulunur.
- IEnumerable'ın child class'ıdır.
- Veritabanlarındaki sorgularda kullanılır. IEnumerable ise daha çok koleksiyonlar üzerinde kullanılırdı.


Yine CTRL + IQueryable'a tıklarsak;

namespace System.Linq
{
	...
    public interface IQueryable : IEnumerable //dan miras aldığını görürüz.
    {
        ...
        Type ElementType { get; }
        ...
        Expression Expression { get; }
        ...
        IQueryProvider Provider { get; }
    }
}

- IQueryProvider Provider türünde ve isminde bir property'e sahiptir. IQueryProvider'a CTRL + sol tık ile gidersek;

namespace System.Linq
{
    ...
    public interface IQueryProvider
    {
        ...
        IQueryable CreateQuery(Expression expression);
        ...
        IQueryable<TElement> CreateQuery<TElement>(Expression expression);
        ...
        object? Execute(Expression expression);
        ...
        TResult Execute<TResult>(Expression expression);
    }
}

yukarıdaki metotları bizim kendi Linq Provider'ımızı yaratmakta kullandığını görürüz.

Ayrıca Where'i de benzer şekilde kurcalarsak IQueryable'ın bir extension metodu olduğunu görürüz.

Genel bir örnek;

namespace LinqSample1
{
    class Program
    {
        static void Main(string[] args)
        {

            List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

            List<Employee> employees = new List<Employee>()
            {
                new Employee() { Id = 1, Name = "Ali" },
                new Employee() { Id = 2,Name = "Hakan"}
            };

            IQueryable<Employee> query1 = employees.AsQueryable().Where( X => X.Id == 1 );

            foreach (var item in query1)
            {
                Console.WriteLine("Id : " + item.Id + "'e sahip şahsın adı: " + item.Name);
            }
        }
        class Employee
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }
    }
}

Çıktı: 
Id : 1'e sahip sahsın adı: Ali

Özet olarak; IEnumerable tipi veriyi önce belleğe atıp ardından bellekteki bu veri üzerinden belirtilen koşulları çalıştırır ve veriye uygular.

IQueryable tipinde ise belirtilen sorgular direk olarak server üzerinde çalıştırılır ve dönüş sağlar. Ayrıca bu tip IEnumerable tipini implement ettiği için IEnumerable’ın tüm özelliklerini kullanabilir.

Aslında açıklamalara bakacak olursak ikisi arasındaki farkı çok rahat görebiliriz. IQueryable bize database vb. veri depolarında yapılan sorgulamalar da işlevsellik sağlarken, IEnumerable ise bize bir koleksiyon üzerinde sorgulama yapmak için olanak sağlar.